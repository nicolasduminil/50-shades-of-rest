[INFO] Scanning for projects...
[INFO] ------------------------------------------------------------------------
[INFO] Reactor Build Order:
[INFO] 
[INFO] 50 Shades of REST :: the orders master POM                         [pom]
[INFO] 50 Shades of REST :: the domain module                             [jar]
[INFO] 50 Shades of REST :: the repository module                         [jar]
[INFO] 50 Shades of REST :: the API module                                [jar]
[INFO] 50 Shades of REST :: the service module                            [jar]
[INFO] 50 Shades of REST :: the orders management base test module        [jar]
[INFO] 50 Shades of REST :: the classic module                            [jar]
[INFO] 50 Shades of REST :: the infrastructure module                     [jar]
[INFO] 50 Shades of REST :: the async module                              [jar]
[INFO] 50 Shades of REST :: the reactive repository module                [jar]
[INFO] 50 Shades of REST :: the reactive service module                   [jar]
[INFO] 50 Shades of REST :: the reactive module                           [jar]
[INFO] 
[INFO] ----------------< fr.simplex-software.workshop:orders >-----------------
[INFO] Building 50 Shades of REST :: the orders master POM 1.0-SNAPSHOT  [1/12]
[INFO]   from pom.xml
[INFO] --------------------------------[ pom ]---------------------------------
[INFO] 
[INFO] --- failsafe:3.3.1:integration-test (default-cli) @ orders ---
[INFO] No tests to run.
[INFO] 
[INFO] -------------< fr.simplex-software.workshop:orders-domain >-------------
[INFO] Building 50 Shades of REST :: the domain module 1.0-SNAPSHOT      [2/12]
[INFO]   from orders-domain/pom.xml
[INFO] --------------------------------[ jar ]---------------------------------
[INFO] 
[INFO] --- failsafe:3.3.1:integration-test (default-cli) @ orders-domain ---
[INFO] Using auto detected provider org.apache.maven.surefire.junitplatform.JUnitPlatformProvider
[INFO] 
[INFO] -------------------------------------------------------
[INFO]  T E S T S
[INFO] -------------------------------------------------------
[INFO] Running fr.simplex_software.fifty_shades_of_rest.orders.domain.tests.JpaHibernateIT
2025-02-05 19:19:54,558 WARN  [org.hib.orm.con.pooling] (JPA Startup Thread) HHH10001002: Using built-in connection pool (not intended for production use)
Hibernate: 
    drop table if exists CUSTOMERS cascade 
Hibernate: 
    drop table if exists ORDERS cascade 
Hibernate: 
    drop sequence if exists CUSTOMERS_SEQ
Hibernate: 
    drop sequence if exists ORDERS_SEQ
Hibernate: 
    create sequence CUSTOMERS_SEQ start with 1 increment by 1
Hibernate: 
    create sequence ORDERS_SEQ start with 1 increment by 1
Hibernate: 
    create table CUSTOMERS (
        ID bigint not null,
        EMAIL varchar(40) not null unique,
        FIRST_NAME varchar(40) not null,
        LAST_NAME varchar(40) not null,
        PHONE varchar(40) not null unique,
        primary key (ID)
    )
Hibernate: 
    create table ORDERS (
        PRICE numeric(38,2) not null,
        CUSTOMER_ID bigint not null,
        ID bigint not null,
        ITEM varchar(40) not null,
        primary key (ID)
    )
Hibernate: 
    alter table if exists ORDERS 
       add constraint FKflgddyesjyik2ro2p501yys8r 
       foreign key (CUSTOMER_ID) 
       references CUSTOMERS 
       on delete cascade
Hibernate: 
    select
        next value for CUSTOMERS_SEQ
Hibernate: 
    select
        next value for ORDERS_SEQ
Hibernate: 
    insert 
    into
        CUSTOMERS
        (EMAIL, FIRST_NAME, LAST_NAME, PHONE, ID) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        ORDERS
        (CUSTOMER_ID, ITEM, PRICE, ID) 
    values
        (?, ?, ?, ?)
Hibernate: 
    select
        o1_0.ID,
        o1_0.CUSTOMER_ID,
        c1_0.ID,
        c1_0.EMAIL,
        c1_0.FIRST_NAME,
        c1_0.LAST_NAME,
        c1_0.PHONE,
        o1_0.ITEM,
        o1_0.PRICE 
    from
        ORDERS o1_0 
    join
        CUSTOMERS c1_0 
            on c1_0.ID=o1_0.CUSTOMER_ID 
    where
        o1_0.ID=?
Hibernate: 
    select
        next value for CUSTOMERS_SEQ
Hibernate: 
    insert 
    into
        CUSTOMERS
        (EMAIL, FIRST_NAME, LAST_NAME, PHONE, ID) 
    values
        (?, ?, ?, ?, ?)
2025-02-05 19:19:55,385 WARN  [org.hib.eng.jdb.spi.SqlExceptionHelper] (main) SQL Error: 23505, SQLState: 23505
2025-02-05 19:19:55,385 ERROR [org.hib.eng.jdb.spi.SqlExceptionHelper] (main) Unique index or primary key violation: "PUBLIC.CONSTRAINT_INDEX_6 ON PUBLIC.CUSTOMERS(EMAIL NULLS FIRST) VALUES ( /* 1 */ 'john.doe@email.com' )"; SQL statement:
insert into CUSTOMERS (EMAIL,FIRST_NAME,LAST_NAME,PHONE,ID) values (?,?,?,?,?) [23505-230]
[ERROR] Tests run: 2, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 4.376 s <<< FAILURE! -- in fr.simplex_software.fifty_shades_of_rest.orders.domain.tests.JpaHibernateIT
[ERROR] fr.simplex_software.fifty_shades_of_rest.orders.domain.tests.JpaHibernateIT.testCustomer -- Time elapsed: 0.010 s <<< ERROR!
org.hibernate.exception.ConstraintViolationException: 
could not execute statement [Unique index or primary key violation: "PUBLIC.CONSTRAINT_INDEX_6 ON PUBLIC.CUSTOMERS(EMAIL NULLS FIRST) VALUES ( /* 1 */ 'john.doe@email.com' )"; SQL statement:
insert into CUSTOMERS (EMAIL,FIRST_NAME,LAST_NAME,PHONE,ID) values (?,?,?,?,?) [23505-230]] [insert into CUSTOMERS (EMAIL,FIRST_NAME,LAST_NAME,PHONE,ID) values (?,?,?,?,?)]
	at org.hibernate.dialect.H2Dialect.lambda$buildSQLExceptionConversionDelegate$3(H2Dialect.java:759)
	at org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:58)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:108)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)
	at org.hibernate.engine.jdbc.mutation.internal.AbstractMutationExecutor.performNonBatchedMutation(AbstractMutationExecutor.java:134)
	at org.hibernate.engine.jdbc.mutation.internal.MutationExecutorSingleNonBatched.performNonBatchedOperations(MutationExecutorSingleNonBatched.java:55)
	at org.hibernate.engine.jdbc.mutation.internal.AbstractMutationExecutor.execute(AbstractMutationExecutor.java:55)
	at org.hibernate.persister.entity.mutation.InsertCoordinatorStandard.doStaticInserts(InsertCoordinatorStandard.java:194)
	at org.hibernate.persister.entity.mutation.InsertCoordinatorStandard.coordinateInsert(InsertCoordinatorStandard.java:132)
	at org.hibernate.persister.entity.mutation.InsertCoordinatorStandard.insert(InsertCoordinatorStandard.java:104)
	at org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:110)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:644)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:511)
	at org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:414)
	at org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:41)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127)
	at org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1429)
	at org.hibernate.internal.SessionImpl.flush(SessionImpl.java:1415)
	at io.quarkus.hibernate.orm.runtime.session.TransactionScopedSession.flush(TransactionScopedSession.java:235)
	at org.hibernate.engine.spi.SessionLazyDelegator.flush(SessionLazyDelegator.java:83)
	at org.hibernate.Session_ezLSRLJ-TR8CmZvftUcZnZhAtx8_Synthetic_ClientProxy.flush(Unknown Source)
	at fr.simplex_software.fifty_shades_of_rest.orders.domain.tests.JpaHibernateIT.testCustomer(JpaHibernateIT.java:28)
	at fr.simplex_software.fifty_shades_of_rest.orders.domain.tests.JpaHibernateIT_Subclass.testCustomer$$superforward(Unknown Source)
	at fr.simplex_software.fifty_shades_of_rest.orders.domain.tests.JpaHibernateIT_Subclass$$function$$1.apply(Unknown Source)
	at io.quarkus.arc.impl.AroundInvokeInvocationContext.proceed(AroundInvokeInvocationContext.java:73)
	at io.quarkus.arc.impl.AroundInvokeInvocationContext.proceed(AroundInvokeInvocationContext.java:62)
	at io.quarkus.narayana.jta.runtime.interceptor.TransactionalInterceptorBase.invokeInOurTx(TransactionalInterceptorBase.java:136)
	at io.quarkus.narayana.jta.runtime.interceptor.TransactionalInterceptorBase.invokeInOurTx(TransactionalInterceptorBase.java:107)
	at io.quarkus.narayana.jta.runtime.interceptor.TransactionalInterceptorRequired.doIntercept(TransactionalInterceptorRequired.java:38)
	at io.quarkus.narayana.jta.runtime.interceptor.TransactionalInterceptorBase.intercept(TransactionalInterceptorBase.java:61)
	at io.quarkus.narayana.jta.runtime.interceptor.TransactionalInterceptorRequired.intercept(TransactionalInterceptorRequired.java:32)
	at io.quarkus.narayana.jta.runtime.interceptor.TransactionalInterceptorRequired_Bean.intercept(Unknown Source)
	at io.quarkus.arc.impl.InterceptorInvocation.invoke(InterceptorInvocation.java:42)
	at io.quarkus.arc.impl.AroundInvokeInvocationContext.perform(AroundInvokeInvocationContext.java:30)
	at io.quarkus.arc.impl.InvocationContexts.performAroundInvoke(InvocationContexts.java:27)
	at fr.simplex_software.fifty_shades_of_rest.orders.domain.tests.JpaHibernateIT_Subclass.testCustomer(Unknown Source)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at io.quarkus.test.junit.QuarkusTestExtension.runExtensionMethod(QuarkusTestExtension.java:967)
	at io.quarkus.test.junit.QuarkusTestExtension.interceptTestMethod(QuarkusTestExtension.java:817)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
Caused by: org.h2.jdbc.JdbcSQLIntegrityConstraintViolationException: Unique index or primary key violation: "PUBLIC.CONSTRAINT_INDEX_6 ON PUBLIC.CUSTOMERS(EMAIL NULLS FIRST) VALUES ( /* 1 */ 'john.doe@email.com' )"; SQL statement:
insert into CUSTOMERS (EMAIL,FIRST_NAME,LAST_NAME,PHONE,ID) values (?,?,?,?,?) [23505-230]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:520)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:489)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.index.Index.getDuplicateKeyException(Index.java:523)
	at org.h2.mvstore.db.MVSecondaryIndex.checkUnique(MVSecondaryIndex.java:223)
	at org.h2.mvstore.db.MVSecondaryIndex.add(MVSecondaryIndex.java:184)
	at org.h2.mvstore.db.MVTable.addRow(MVTable.java:518)
	at org.h2.command.dml.Insert.insertRows(Insert.java:174)
	at org.h2.command.dml.Insert.update(Insert.java:135)
	at org.h2.command.dml.DataChangeStatement.update(DataChangeStatement.java:74)
	at org.h2.command.CommandContainer.update(CommandContainer.java:139)
	at org.h2.command.Command.executeUpdate(Command.java:304)
	at org.h2.command.Command.executeUpdate(Command.java:248)
	at org.h2.jdbc.JdbcPreparedStatement.executeUpdateInternal(JdbcPreparedStatement.java:213)
	at org.h2.jdbc.JdbcPreparedStatement.executeUpdate(JdbcPreparedStatement.java:172)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:194)
	... 37 more

[INFO] 
[INFO] Results:
[INFO] 
[ERROR] Errors: 
[ERROR]   JpaHibernateIT.testCustomer:28 » ConstraintViolation could not execute statement [Unique index or primary key violation: "PUBLIC.CONSTRAINT_INDEX_6 ON PUBLIC.CUSTOMERS(EMAIL NULLS FIRST) VALUES ( /* 1 */ 'john.doe@email.com' )"; SQL statement:
insert into CUSTOMERS (EMAIL,FIRST_NAME,LAST_NAME,PHONE,ID) values (?,?,?,?,?) [23505-230]] [insert into CUSTOMERS (EMAIL,FIRST_NAME,LAST_NAME,PHONE,ID) values (?,?,?,?,?)]
[INFO] 
[ERROR] Tests run: 2, Failures: 0, Errors: 1, Skipped: 0
[INFO] 
[INFO] 
[INFO] -----------< fr.simplex-software.workshop:orders-repository >-----------
[INFO] Building 50 Shades of REST :: the repository module 1.0-SNAPSHOT  [3/12]
[INFO]   from orders-repository/pom.xml
[INFO] --------------------------------[ jar ]---------------------------------
[INFO] 
[INFO] --- failsafe:3.3.1:integration-test (default-cli) @ orders-repository ---
[INFO] Using auto detected provider org.apache.maven.surefire.junitplatform.JUnitPlatformProvider
[INFO] 
[INFO] -------------------------------------------------------
[INFO]  T E S T S
[INFO] -------------------------------------------------------
[INFO] Running fr.simplex_software.fifty_shades_of_rest.orders.repository.tests.integration.CustomerRepositoryIT
2025-02-05 19:20:01,265 WARN  [com.git.dat.rid.cor.dat.DataSetExecutorImpl] (main) Database will not be populated because no dataset has been provided.
2025-02-05 19:20:01,358 WARN  [org.hib.eng.jdb.spi.SqlExceptionHelper] (main) SQL Error: 23505, SQLState: 23505
2025-02-05 19:20:01,358 ERROR [org.hib.eng.jdb.spi.SqlExceptionHelper] (main) Unique index or primary key violation: "PUBLIC.CONSTRAINT_INDEX_6 ON PUBLIC.CUSTOMERS(EMAIL NULLS FIRST) VALUES ( /* 2 */ 'jane.doe@email.com' )"; SQL statement:
update CUSTOMERS set EMAIL=?,FIRST_NAME=?,LAST_NAME=?,PHONE=? where ID=? [23505-230]
[ERROR] Tests run: 10, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 5.379 s <<< FAILURE! -- in fr.simplex_software.fifty_shades_of_rest.orders.repository.tests.integration.CustomerRepositoryIT
[ERROR] fr.simplex_software.fifty_shades_of_rest.orders.repository.tests.integration.CustomerRepositoryIT.testUpdateCustomer -- Time elapsed: 0.047 s <<< ERROR!
org.hibernate.exception.ConstraintViolationException: 
could not execute statement [Unique index or primary key violation: "PUBLIC.CONSTRAINT_INDEX_6 ON PUBLIC.CUSTOMERS(EMAIL NULLS FIRST) VALUES ( /* 2 */ 'jane.doe@email.com' )"; SQL statement:
update CUSTOMERS set EMAIL=?,FIRST_NAME=?,LAST_NAME=?,PHONE=? where ID=? [23505-230]] [update CUSTOMERS set EMAIL=?,FIRST_NAME=?,LAST_NAME=?,PHONE=? where ID=?]
	at org.hibernate.dialect.H2Dialect.lambda$buildSQLExceptionConversionDelegate$3(H2Dialect.java:759)
	at org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:58)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:108)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)
	at org.hibernate.engine.jdbc.mutation.internal.AbstractMutationExecutor.performNonBatchedMutation(AbstractMutationExecutor.java:134)
	at org.hibernate.engine.jdbc.mutation.internal.MutationExecutorSingleNonBatched.performNonBatchedOperations(MutationExecutorSingleNonBatched.java:55)
	at org.hibernate.engine.jdbc.mutation.internal.AbstractMutationExecutor.execute(AbstractMutationExecutor.java:55)
	at org.hibernate.persister.entity.mutation.UpdateCoordinatorStandard.doStaticUpdate(UpdateCoordinatorStandard.java:781)
	at org.hibernate.persister.entity.mutation.UpdateCoordinatorStandard.performUpdate(UpdateCoordinatorStandard.java:328)
	at org.hibernate.persister.entity.mutation.UpdateCoordinatorStandard.update(UpdateCoordinatorStandard.java:245)
	at org.hibernate.action.internal.EntityUpdateAction.execute(EntityUpdateAction.java:169)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:644)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:511)
	at org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:414)
	at org.hibernate.event.internal.DefaultAutoFlushEventListener.onAutoFlush(DefaultAutoFlushEventListener.java:67)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127)
	at org.hibernate.internal.SessionImpl.autoFlushIfRequired(SessionImpl.java:1379)
	at org.hibernate.internal.SessionImpl.autoFlushIfRequired(SessionImpl.java:1366)
	at org.hibernate.sql.exec.internal.StandardJdbcMutationExecutor.execute(StandardJdbcMutationExecutor.java:46)
	at org.hibernate.query.sqm.internal.SimpleUpdateQueryPlan.executeUpdate(SimpleUpdateQueryPlan.java:89)
	at org.hibernate.query.sqm.internal.QuerySqmImpl.doExecuteUpdate(QuerySqmImpl.java:521)
	at org.hibernate.query.sqm.internal.QuerySqmImpl.executeUpdate(QuerySqmImpl.java:493)
	at io.quarkus.hibernate.orm.panache.common.runtime.AbstractJpaOperations.executeUpdate(AbstractJpaOperations.java:480)
	at io.quarkus.hibernate.orm.panache.common.runtime.AbstractJpaOperations.update(AbstractJpaOperations.java:509)
	at fr.simplex_software.fifty_shades_of_rest.orders.repository.CustomerRepository.update(CustomerRepository.java)
	at fr.simplex_software.fifty_shades_of_rest.orders.repository.CustomerRepository.updateById(CustomerRepository.java:45)
	at fr.simplex_software.fifty_shades_of_rest.orders.repository.CustomerRepository_ClientProxy.updateById(Unknown Source)
	at fr.simplex_software.fifty_shades_of_rest.orders.repository.tests.integration.CustomerRepositoryIT.testUpdateCustomer(CustomerRepositoryIT.java:114)
	at fr.simplex_software.fifty_shades_of_rest.orders.repository.tests.integration.CustomerRepositoryIT_Subclass.testUpdateCustomer$$superforward(Unknown Source)
	at fr.simplex_software.fifty_shades_of_rest.orders.repository.tests.integration.CustomerRepositoryIT_Subclass$$function$$10.apply(Unknown Source)
	at io.quarkus.arc.impl.AroundInvokeInvocationContext.proceed(AroundInvokeInvocationContext.java:73)
	at io.quarkus.arc.impl.AroundInvokeInvocationContext$NextAroundInvokeInvocationContext.proceed(AroundInvokeInvocationContext.java:97)
	at io.quarkus.narayana.jta.runtime.interceptor.TransactionalInterceptorBase.invokeInOurTx(TransactionalInterceptorBase.java:136)
	at io.quarkus.narayana.jta.runtime.interceptor.TransactionalInterceptorBase.invokeInOurTx(TransactionalInterceptorBase.java:107)
	at io.quarkus.narayana.jta.runtime.interceptor.TransactionalInterceptorRequired.doIntercept(TransactionalInterceptorRequired.java:38)
	at io.quarkus.narayana.jta.runtime.interceptor.TransactionalInterceptorBase.intercept(TransactionalInterceptorBase.java:61)
	at io.quarkus.narayana.jta.runtime.interceptor.TransactionalInterceptorRequired.intercept(TransactionalInterceptorRequired.java:32)
	at io.quarkus.narayana.jta.runtime.interceptor.TransactionalInterceptorRequired_Bean.intercept(Unknown Source)
	at io.quarkus.arc.impl.InterceptorInvocation.invoke(InterceptorInvocation.java:42)
	at io.quarkus.arc.impl.AroundInvokeInvocationContext.proceed(AroundInvokeInvocationContext.java:70)
	at io.quarkus.arc.impl.AroundInvokeInvocationContext.proceed(AroundInvokeInvocationContext.java:62)
	at com.github.database.rider.cdi.DBUnitInterceptorImpl.intercept(DBUnitInterceptorImpl.java:84)
	at com.github.database.rider.cdi.DBUnitInterceptorImpl_Bean.intercept(Unknown Source)
	at io.quarkus.arc.impl.InterceptorInvocation.invoke(InterceptorInvocation.java:42)
	at io.quarkus.arc.impl.AroundInvokeInvocationContext.perform(AroundInvokeInvocationContext.java:30)
	at io.quarkus.arc.impl.InvocationContexts.performAroundInvoke(InvocationContexts.java:27)
	at fr.simplex_software.fifty_shades_of_rest.orders.repository.tests.integration.CustomerRepositoryIT_Subclass.testUpdateCustomer(Unknown Source)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at io.quarkus.test.junit.QuarkusTestExtension.runExtensionMethod(QuarkusTestExtension.java:967)
	at io.quarkus.test.junit.QuarkusTestExtension.interceptTestMethod(QuarkusTestExtension.java:817)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
Caused by: org.h2.jdbc.JdbcSQLIntegrityConstraintViolationException: Unique index or primary key violation: "PUBLIC.CONSTRAINT_INDEX_6 ON PUBLIC.CUSTOMERS(EMAIL NULLS FIRST) VALUES ( /* 2 */ 'jane.doe@email.com' )"; SQL statement:
update CUSTOMERS set EMAIL=?,FIRST_NAME=?,LAST_NAME=?,PHONE=? where ID=? [23505-230]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:520)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:489)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.index.Index.getDuplicateKeyException(Index.java:523)
	at org.h2.mvstore.db.MVSecondaryIndex.checkUnique(MVSecondaryIndex.java:223)
	at org.h2.mvstore.db.MVSecondaryIndex.add(MVSecondaryIndex.java:184)
	at org.h2.mvstore.db.MVTable.addRow(MVTable.java:518)
	at org.h2.table.Table.updateRows(Table.java:564)
	at org.h2.command.dml.Update.doUpdate(Update.java:103)
	at org.h2.command.dml.Update.update(Update.java:87)
	at org.h2.command.dml.DataChangeStatement.update(DataChangeStatement.java:74)
	at org.h2.command.CommandContainer.update(CommandContainer.java:139)
	at org.h2.command.Command.executeUpdate(Command.java:304)
	at org.h2.command.Command.executeUpdate(Command.java:248)
	at org.h2.jdbc.JdbcPreparedStatement.executeUpdateInternal(JdbcPreparedStatement.java:213)
	at org.h2.jdbc.JdbcPreparedStatement.executeUpdate(JdbcPreparedStatement.java:172)
	at io.agroal.pool.wrapper.PreparedStatementWrapper.executeUpdate(PreparedStatementWrapper.java:90)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:194)
	... 48 more

[INFO] Running fr.simplex_software.fifty_shades_of_rest.orders.repository.tests.integration.OrderRepositoryIT
2025-02-05 19:20:01,460 WARN  [com.git.dat.rid.cor.dat.DataSetExecutorImpl] (main) Database will not be populated because no dataset has been provided.
[INFO] Tests run: 9, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.121 s -- in fr.simplex_software.fifty_shades_of_rest.orders.repository.tests.integration.OrderRepositoryIT
[INFO] 
[INFO] Results:
[INFO] 
[ERROR] Errors: 
[ERROR]   CustomerRepositoryIT.testUpdateCustomer:114 » ConstraintViolation could not execute statement [Unique index or primary key violation: "PUBLIC.CONSTRAINT_INDEX_6 ON PUBLIC.CUSTOMERS(EMAIL NULLS FIRST) VALUES ( /* 2 */ 'jane.doe@email.com' )"; SQL statement:
update CUSTOMERS set EMAIL=?,FIRST_NAME=?,LAST_NAME=?,PHONE=? where ID=? [23505-230]] [update CUSTOMERS set EMAIL=?,FIRST_NAME=?,LAST_NAME=?,PHONE=? where ID=?]
[INFO] 
[ERROR] Tests run: 19, Failures: 0, Errors: 1, Skipped: 0
[INFO] 
[INFO] 
[INFO] --------------< fr.simplex-software.workshop:orders-api >---------------
[INFO] Building 50 Shades of REST :: the API module 1.0-SNAPSHOT         [4/12]
[INFO]   from orders-api/pom.xml
[INFO] --------------------------------[ jar ]---------------------------------
[INFO] 
[INFO] --- failsafe:3.3.1:integration-test (default-cli) @ orders-api ---
[INFO] 
[INFO] ------------< fr.simplex-software.workshop:orders-service >-------------
[INFO] Building 50 Shades of REST :: the service module 1.0-SNAPSHOT     [5/12]
[INFO]   from orders-service/pom.xml
[INFO] --------------------------------[ jar ]---------------------------------
[INFO] 
[INFO] --- failsafe:3.3.1:integration-test (default-cli) @ orders-service ---
[INFO] Using auto detected provider org.apache.maven.surefire.junitplatform.JUnitPlatformProvider
[INFO] 
[INFO] -------------------------------------------------------
[INFO]  T E S T S
[INFO] -------------------------------------------------------
[INFO] Running fr.simplex_software.fifty_shades_of_rest.orders.service.mapping.tests.integration.CustomerMapperIT
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 6.006 s -- in fr.simplex_software.fifty_shades_of_rest.orders.service.mapping.tests.integration.CustomerMapperIT
[INFO] Running fr.simplex_software.fifty_shades_of_rest.orders.service.mapping.tests.integration.CustomerServiceIT
[INFO] Tests run: 10, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.385 s -- in fr.simplex_software.fifty_shades_of_rest.orders.service.mapping.tests.integration.CustomerServiceIT
[INFO] Running fr.simplex_software.fifty_shades_of_rest.orders.service.mapping.tests.integration.OrderMapperIT
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.018 s -- in fr.simplex_software.fifty_shades_of_rest.orders.service.mapping.tests.integration.OrderMapperIT
[INFO] Running fr.simplex_software.fifty_shades_of_rest.orders.service.mapping.tests.integration.OrderServiceIT
[INFO] Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.075 s -- in fr.simplex_software.fifty_shades_of_rest.orders.service.mapping.tests.integration.OrderServiceIT
[INFO] 
[INFO] Results:
[INFO] 
[INFO] Tests run: 20, Failures: 0, Errors: 0, Skipped: 0
[INFO] 
[INFO] 
[INFO] --------------< fr.simplex-software.workshop:orders-test >--------------
[INFO] Building 50 Shades of REST :: the orders management base test module 1.0-SNAPSHOT [6/12]
[INFO]   from orders-test/pom.xml
[INFO] --------------------------------[ jar ]---------------------------------
[INFO] 
[INFO] --- failsafe:3.3.1:integration-test (default-cli) @ orders-test ---
[INFO] 
[INFO] ------------< fr.simplex-software.workshop:orders-classic >-------------
[INFO] Building 50 Shades of REST :: the classic module 1.0-SNAPSHOT     [7/12]
[INFO]   from orders-classic/pom.xml
[INFO] --------------------------------[ jar ]---------------------------------
[INFO] 
[INFO] --- failsafe:3.3.1:integration-test (default-cli) @ orders-classic ---
[INFO] Using auto detected provider org.apache.maven.surefire.junitplatform.JUnitPlatformProvider
[INFO] 
[INFO] -------------------------------------------------------
[INFO]  T E S T S
[INFO] -------------------------------------------------------
[INFO] Running fr.simplex_software.fifty_shades_of_rest.orders.provider.tests.OrdersAsyncJava8BlockingClientIT
2025-02-05 19:20:15,263 INFO  [io.qua.dev.h2.dep.H2DevServicesProcessor] (build-28) Dev Services for H2 started.
2025-02-05 19:20:15,269 INFO  [io.qua.dat.dep.dev.DevServicesDatasourceProcessor] (build-28) Dev Services for default datasource (h2) started
2025-02-05 19:20:17,607 INFO  [io.quarkus] (main) orders-classic 1.0-SNAPSHOT on JVM (powered by Quarkus 3.17.2) started in 3.784s. Listening on: http://localhost:8081
2025-02-05 19:20:17,608 INFO  [io.quarkus] (main) Profile test activated. 
2025-02-05 19:20:17,608 INFO  [io.quarkus] (main) Installed features: [agroal, cdi, hibernate-orm, hibernate-orm-panache, jdbc-h2, jdbc-postgresql, narayana-jta, reactive-routes, rest, rest-client, rest-client-jackson, rest-jackson, smallrye-context-propagation, smallrye-fault-tolerance, smallrye-health, smallrye-metrics, smallrye-openapi, swagger-ui, vertx]
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 7.732 s -- in fr.simplex_software.fifty_shades_of_rest.orders.provider.tests.OrdersAsyncJava8BlockingClientIT
[INFO] Running fr.simplex_software.fifty_shades_of_rest.orders.provider.tests.OrdersAsyncJava8NonBlockingClientIT
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.099 s -- in fr.simplex_software.fifty_shades_of_rest.orders.provider.tests.OrdersAsyncJava8NonBlockingClientIT
[INFO] Running fr.simplex_software.fifty_shades_of_rest.orders.provider.tests.OrdersAsyncJaxRs20BlockingClientIT
[INFO] Tests run: 11, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.243 s -- in fr.simplex_software.fifty_shades_of_rest.orders.provider.tests.OrdersAsyncJaxRs20BlockingClientIT
[INFO] Running fr.simplex_software.fifty_shades_of_rest.orders.provider.tests.OrdersAsyncJaxRs20NonBlockingClientIT
[INFO] Tests run: 11, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.161 s -- in fr.simplex_software.fifty_shades_of_rest.orders.provider.tests.OrdersAsyncJaxRs20NonBlockingClientIT
[INFO] Running fr.simplex_software.fifty_shades_of_rest.orders.provider.tests.OrdersAsyncJaxRs21BlockingClientIT
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.057 s -- in fr.simplex_software.fifty_shades_of_rest.orders.provider.tests.OrdersAsyncJaxRs21BlockingClientIT
[INFO] Running fr.simplex_software.fifty_shades_of_rest.orders.provider.tests.OrdersAsyncJaxRs21NonBlockingClientIT
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.055 s -- in fr.simplex_software.fifty_shades_of_rest.orders.provider.tests.OrdersAsyncJaxRs21NonBlockingClientIT
[INFO] Running fr.simplex_software.fifty_shades_of_rest.orders.provider.tests.OrdersSyncJakartaClientIT
[INFO] Tests run: 11, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.113 s -- in fr.simplex_software.fifty_shades_of_rest.orders.provider.tests.OrdersSyncJakartaClientIT
[INFO] Running fr.simplex_software.fifty_shades_of_rest.orders.provider.tests.OrdersSyncJava11ClientIT
[INFO] Tests run: 10, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.395 s -- in fr.simplex_software.fifty_shades_of_rest.orders.provider.tests.OrdersSyncJava11ClientIT
[INFO] Running fr.simplex_software.fifty_shades_of_rest.orders.provider.tests.OrdersSyncMpClientIT
[INFO] Tests run: 9, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.104 s -- in fr.simplex_software.fifty_shades_of_rest.orders.provider.tests.OrdersSyncMpClientIT
[INFO] Running fr.simplex_software.fifty_shades_of_rest.orders.provider.tests.OrdersSyncRestAssuredClientIT
Request method:	POST
Request URI:	http://localhost:8081/customers
Proxy:			<none>
Request params:	<none>
Query params:	<none>
Form params:	<none>
Path params:	<none>
Headers:		Accept=*/*
				Content-Type=application/json
Cookies:		<none>
Multiparts:		<none>
Body:
{
    "id": null,
    "firstName": "John",
    "lastName": "Doe",
    "email": "john.doe@email.com",
    "phone": "1234567890"
}
Request method:	GET
Request URI:	http://localhost:8081/customers/email/john.doe%2540email.com
Proxy:			<none>
Request params:	<none>
Query params:	<none>
Form params:	<none>
Path params:	email=john.doe%40email.com
Headers:		Accept=*/*
Cookies:		<none>
Multiparts:		<none>
Body:			<none>
Request method:	POST
Request URI:	http://localhost:8081/orders
Proxy:			<none>
Request params:	<none>
Query params:	<none>
Form params:	<none>
Path params:	<none>
Headers:		Accept=*/*
				Content-Type=application/json
Cookies:		<none>
Multiparts:		<none>
Body:
{
    "id": null,
    "item": "myItem01",
    "price": 100.25,
    "customerId": 10
}
Request method:	GET
Request URI:	http://localhost:8081/orders
Proxy:			<none>
Request params:	<none>
Query params:	<none>
Form params:	<none>
Path params:	<none>
Headers:		Accept=*/*
Cookies:		<none>
Multiparts:		<none>
Body:			<none>
Request method:	GET
Request URI:	http://localhost:8081/customers
Proxy:			<none>
Request params:	<none>
Query params:	<none>
Form params:	<none>
Path params:	<none>
Headers:		Accept=*/*
Cookies:		<none>
Multiparts:		<none>
Body:			<none>
Request method:	GET
Request URI:	http://localhost:8081/customers/email/john.doe%2540email.com
Proxy:			<none>
Request params:	<none>
Query params:	<none>
Form params:	<none>
Path params:	email=john.doe%40email.com
Headers:		Accept=*/*
Cookies:		<none>
Multiparts:		<none>
Body:			<none>
Request method:	PUT
Request URI:	http://localhost:8081/customers
Proxy:			<none>
Request params:	<none>
Query params:	<none>
Form params:	<none>
Path params:	<none>
Headers:		Accept=*/*
				Content-Type=application/json
Cookies:		<none>
Multiparts:		<none>
Body:
{
    "id": 10,
    "firstName": "Jane",
    "lastName": "Doe",
    "email": "jane.doe@email.com",
    "phone": "0987654321"
}
Request method:	GET
Request URI:	http://localhost:8081/customers/email/jane.doe%2540email.com
Proxy:			<none>
Request params:	<none>
Query params:	<none>
Form params:	<none>
Path params:	email=jane.doe%40email.com
Headers:		Accept=*/*
Cookies:		<none>
Multiparts:		<none>
Body:			<none>
Request method:	GET
Request URI:	http://localhost:8081/customers/email/jane.doe%2540email.com
Proxy:			<none>
Request params:	<none>
Query params:	<none>
Form params:	<none>
Path params:	email=jane.doe%40email.com
Headers:		Accept=*/*
Cookies:		<none>
Multiparts:		<none>
Body:			<none>
Request method:	GET
Request URI:	http://localhost:8081/orders/customer/10
Proxy:			<none>
Request params:	<none>
Query params:	<none>
Form params:	<none>
Path params:	id=10
Headers:		Accept=*/*
Cookies:		<none>
Multiparts:		<none>
Body:			<none>
Request method:	GET
Request URI:	http://localhost:8081/orders
Proxy:			<none>
Request params:	<none>
Query params:	<none>
Form params:	<none>
Path params:	<none>
Headers:		Accept=*/*
Cookies:		<none>
Multiparts:		<none>
Body:			<none>
Request method:	DELETE
Request URI:	http://localhost:8081/orders
Proxy:			<none>
Request params:	<none>
Query params:	<none>
Form params:	<none>
Path params:	<none>
Headers:		Accept=*/*
				Content-Type=application/json
Cookies:		<none>
Multiparts:		<none>
Body:
{
    "id": 6,
    "item": "myItem01",
    "price": 100.25,
    "customerId": 10
}
Request method:	GET
Request URI:	http://localhost:8081/customers/email/jane.doe%2540email.com
Proxy:			<none>
Request params:	<none>
Query params:	<none>
Form params:	<none>
Path params:	email=jane.doe%40email.com
Headers:		Accept=*/*
Cookies:		<none>
Multiparts:		<none>
Body:			<none>
Request method:	DELETE
Request URI:	http://localhost:8081/customers
Proxy:			<none>
Request params:	<none>
Query params:	<none>
Form params:	<none>
Path params:	<none>
Headers:		Accept=*/*
				Content-Type=application/json
Cookies:		<none>
Multiparts:		<none>
Body:
{
    "id": 10,
    "firstName": "Jane",
    "lastName": "Doe",
    "email": "jane.doe@email.com",
    "phone": "0987654321"
}
[INFO] Tests run: 9, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.761 s -- in fr.simplex_software.fifty_shades_of_rest.orders.provider.tests.OrdersSyncRestAssuredClientIT
2025-02-05 19:20:20,909 INFO  [io.quarkus] (main) orders-classic stopped in 0.022s
[INFO] 
[INFO] Results:
[INFO] 
[INFO] Tests run: 81, Failures: 0, Errors: 0, Skipped: 0
[INFO] 
[INFO] 
[INFO] ---------< fr.simplex-software.workshop:orders-infrastructure >---------
[INFO] Building 50 Shades of REST :: the infrastructure module 1.0-SNAPSHOT [8/12]
[INFO]   from orders-infrastructure/pom.xml
[INFO] --------------------------------[ jar ]---------------------------------
[INFO] 
[INFO] --- failsafe:3.3.1:integration-test (default-cli) @ orders-infrastructure ---
[INFO] No tests to run.
[INFO] 
[INFO] -------------< fr.simplex-software.workshop:orders-async >--------------
[INFO] Building 50 Shades of REST :: the async module 1.0-SNAPSHOT       [9/12]
[INFO]   from orders-async/pom.xml
[INFO] --------------------------------[ jar ]---------------------------------
[INFO] 
[INFO] --- failsafe:3.3.1:integration-test (default-cli) @ orders-async ---
[INFO] Using auto detected provider org.apache.maven.surefire.junitplatform.JUnitPlatformProvider
[INFO] 
[INFO] -------------------------------------------------------
[INFO]  T E S T S
[INFO] -------------------------------------------------------
[INFO] Running fr.simplex_software.fifty_shades_of_rest.orders.async.tests.OrdersAsyncJaxRs20MpClientIT
2025-02-05 19:20:25,591 INFO  [io.qua.dev.h2.dep.H2DevServicesProcessor] (build-10) Dev Services for H2 started.
2025-02-05 19:20:25,597 INFO  [io.qua.dat.dep.dev.DevServicesDatasourceProcessor] (build-10) Dev Services for default datasource (h2) started
2025-02-05 19:20:25,600 INFO  [io.qua.hib.orm.dep.dev.HibernateOrmDevServicesProcessor] (build-3) Setting quarkus.hibernate-orm.database.generation=drop-and-create to initialize Dev Services managed database
2025-02-05 19:20:27,773 INFO  [io.quarkus] (main) orders-async 1.0-SNAPSHOT on JVM (powered by Quarkus 3.17.2) started in 3.602s. Listening on: http://localhost:8081
2025-02-05 19:20:27,774 INFO  [io.quarkus] (main) Profile test activated. 
2025-02-05 19:20:27,774 INFO  [io.quarkus] (main) Installed features: [agroal, cdi, hibernate-orm, hibernate-orm-panache, jdbc-h2, narayana-jta, rest, rest-client, rest-client-jackson, rest-jackson, smallrye-context-propagation, vertx]
[INFO] Tests run: 9, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 7.482 s -- in fr.simplex_software.fifty_shades_of_rest.orders.async.tests.OrdersAsyncJaxRs20MpClientIT
[INFO] Running fr.simplex_software.fifty_shades_of_rest.orders.async.tests.OrdersAsyncJaxRs20RestAssuredClientIT
Request method:	POST
Request URI:	http://localhost:8081/customers-async
Proxy:			<none>
Request params:	<none>
Query params:	<none>
Form params:	<none>
Path params:	<none>
Headers:		Accept=*/*
				Content-Type=application/json
Cookies:		<none>
Multiparts:		<none>
Body:
{
    "id": null,
    "firstName": "John",
    "lastName": "Doe",
    "email": "john.doe@email.com",
    "phone": "1234567890"
}
Request method:	GET
Request URI:	http://localhost:8081/customers-async/email/john.doe%2540email.com
Proxy:			<none>
Request params:	<none>
Query params:	<none>
Form params:	<none>
Path params:	email=john.doe%40email.com
Headers:		Accept=*/*
Cookies:		<none>
Multiparts:		<none>
Body:			<none>
Request method:	POST
Request URI:	http://localhost:8081/orders-async
Proxy:			<none>
Request params:	<none>
Query params:	<none>
Form params:	<none>
Path params:	<none>
Headers:		Accept=*/*
				Content-Type=application/json
Cookies:		<none>
Multiparts:		<none>
Body:
{
    "id": null,
    "item": "myItem01",
    "price": 100.25,
    "customerId": 2
}
Request method:	GET
Request URI:	http://localhost:8081/orders-async
Proxy:			<none>
Request params:	<none>
Query params:	<none>
Form params:	<none>
Path params:	<none>
Headers:		Accept=*/*
Cookies:		<none>
Multiparts:		<none>
Body:			<none>
Request method:	GET
Request URI:	http://localhost:8081/customers-async
Proxy:			<none>
Request params:	<none>
Query params:	<none>
Form params:	<none>
Path params:	<none>
Headers:		Accept=*/*
Cookies:		<none>
Multiparts:		<none>
Body:			<none>
Request method:	GET
Request URI:	http://localhost:8081/customers-async/email/john.doe%2540email.com
Proxy:			<none>
Request params:	<none>
Query params:	<none>
Form params:	<none>
Path params:	email=john.doe%40email.com
Headers:		Accept=*/*
Cookies:		<none>
Multiparts:		<none>
Body:			<none>
Request method:	PUT
Request URI:	http://localhost:8081/customers-async
Proxy:			<none>
Request params:	<none>
Query params:	<none>
Form params:	<none>
Path params:	<none>
Headers:		Accept=*/*
				Content-Type=application/json
Cookies:		<none>
Multiparts:		<none>
Body:
{
    "id": 2,
    "firstName": "Jane",
    "lastName": "Doe",
    "email": "jane.doe@email.com",
    "phone": "0987654321"
}
Request method:	GET
Request URI:	http://localhost:8081/customers-async/email/jane.doe%2540email.com
Proxy:			<none>
Request params:	<none>
Query params:	<none>
Form params:	<none>
Path params:	email=jane.doe%40email.com
Headers:		Accept=*/*
Cookies:		<none>
Multiparts:		<none>
Body:			<none>
Request method:	GET
Request URI:	http://localhost:8081/customers-async/email/jane.doe%2540email.com
Proxy:			<none>
Request params:	<none>
Query params:	<none>
Form params:	<none>
Path params:	email=jane.doe%40email.com
Headers:		Accept=*/*
Cookies:		<none>
Multiparts:		<none>
Body:			<none>
Request method:	GET
Request URI:	http://localhost:8081/orders-async/customer/2
Proxy:			<none>
Request params:	<none>
Query params:	<none>
Form params:	<none>
Path params:	id=2
Headers:		Accept=*/*
Cookies:		<none>
Multiparts:		<none>
Body:			<none>
Request method:	GET
Request URI:	http://localhost:8081/orders-async
Proxy:			<none>
Request params:	<none>
Query params:	<none>
Form params:	<none>
Path params:	<none>
Headers:		Accept=*/*
Cookies:		<none>
Multiparts:		<none>
Body:			<none>
Request method:	DELETE
Request URI:	http://localhost:8081/orders-async
Proxy:			<none>
Request params:	<none>
Query params:	<none>
Form params:	<none>
Path params:	<none>
Headers:		Accept=*/*
				Content-Type=application/json
Cookies:		<none>
Multiparts:		<none>
Body:
{
    "id": 2,
    "item": "myItem01",
    "price": 100.25,
    "customerId": 2
}
Request method:	GET
Request URI:	http://localhost:8081/customers-async/email/jane.doe%2540email.com
Proxy:			<none>
Request params:	<none>
Query params:	<none>
Form params:	<none>
Path params:	email=jane.doe%40email.com
Headers:		Accept=*/*
Cookies:		<none>
Multiparts:		<none>
Body:			<none>
Request method:	DELETE
Request URI:	http://localhost:8081/customers-async
Proxy:			<none>
Request params:	<none>
Query params:	<none>
Form params:	<none>
Path params:	<none>
Headers:		Accept=*/*
				Content-Type=application/json
Cookies:		<none>
Multiparts:		<none>
Body:
{
    "id": 2,
    "firstName": "Jane",
    "lastName": "Doe",
    "email": "jane.doe@email.com",
    "phone": "0987654321"
}
[INFO] Tests run: 9, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.901 s -- in fr.simplex_software.fifty_shades_of_rest.orders.async.tests.OrdersAsyncJaxRs20RestAssuredClientIT
[INFO] Running fr.simplex_software.fifty_shades_of_rest.orders.async.tests.OrdersAsyncJaxRs21MpClientIT
[INFO] Tests run: 9, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.115 s -- in fr.simplex_software.fifty_shades_of_rest.orders.async.tests.OrdersAsyncJaxRs21MpClientIT
[INFO] Running fr.simplex_software.fifty_shades_of_rest.orders.async.tests.OrdersAsyncJaxRs21RestAssuredClientIT
Request method:	POST
Request URI:	http://localhost:8081/customers-async21
Proxy:			<none>
Request params:	<none>
Query params:	<none>
Form params:	<none>
Path params:	<none>
Headers:		Accept=*/*
				Content-Type=application/json
Cookies:		<none>
Multiparts:		<none>
Body:
{
    "id": null,
    "firstName": "John",
    "lastName": "Doe",
    "email": "john.doe@email.com",
    "phone": "1234567890"
}
Request method:	GET
Request URI:	http://localhost:8081/customers-async21/email/john.doe%2540email.com
Proxy:			<none>
Request params:	<none>
Query params:	<none>
Form params:	<none>
Path params:	email=john.doe%40email.com
Headers:		Accept=*/*
Cookies:		<none>
Multiparts:		<none>
Body:			<none>
Request method:	POST
Request URI:	http://localhost:8081/orders-async21
Proxy:			<none>
Request params:	<none>
Query params:	<none>
Form params:	<none>
Path params:	<none>
Headers:		Accept=*/*
				Content-Type=application/json
Cookies:		<none>
Multiparts:		<none>
Body:
{
    "id": null,
    "item": "myItem01",
    "price": 100.25,
    "customerId": 4
}
Request method:	GET
Request URI:	http://localhost:8081/orders-async21
Proxy:			<none>
Request params:	<none>
Query params:	<none>
Form params:	<none>
Path params:	<none>
Headers:		Accept=*/*
Cookies:		<none>
Multiparts:		<none>
Body:			<none>
Request method:	GET
Request URI:	http://localhost:8081/customers-async21
Proxy:			<none>
Request params:	<none>
Query params:	<none>
Form params:	<none>
Path params:	<none>
Headers:		Accept=*/*
Cookies:		<none>
Multiparts:		<none>
Body:			<none>
Request method:	GET
Request URI:	http://localhost:8081/customers-async21/email/john.doe%2540email.com
Proxy:			<none>
Request params:	<none>
Query params:	<none>
Form params:	<none>
Path params:	email=john.doe%40email.com
Headers:		Accept=*/*
Cookies:		<none>
Multiparts:		<none>
Body:			<none>
Request method:	PUT
Request URI:	http://localhost:8081/customers-async21
Proxy:			<none>
Request params:	<none>
Query params:	<none>
Form params:	<none>
Path params:	<none>
Headers:		Accept=*/*
				Content-Type=application/json
Cookies:		<none>
Multiparts:		<none>
Body:
{
    "id": 4,
    "firstName": "Jane",
    "lastName": "Doe",
    "email": "jane.doe@email.com",
    "phone": "0987654321"
}
Request method:	GET
Request URI:	http://localhost:8081/customers-async21/email/jane.doe%2540email.com
Proxy:			<none>
Request params:	<none>
Query params:	<none>
Form params:	<none>
Path params:	email=jane.doe%40email.com
Headers:		Accept=*/*
Cookies:		<none>
Multiparts:		<none>
Body:			<none>
Request method:	GET
Request URI:	http://localhost:8081/customers-async21/email/jane.doe%2540email.com
Proxy:			<none>
Request params:	<none>
Query params:	<none>
Form params:	<none>
Path params:	email=jane.doe%40email.com
Headers:		Accept=*/*
Cookies:		<none>
Multiparts:		<none>
Body:			<none>
Request method:	GET
Request URI:	http://localhost:8081/orders-async21/customer/4
Proxy:			<none>
Request params:	<none>
Query params:	<none>
Form params:	<none>
Path params:	id=4
Headers:		Accept=*/*
Cookies:		<none>
Multiparts:		<none>
Body:			<none>
Request method:	GET
Request URI:	http://localhost:8081/orders-async21
Proxy:			<none>
Request params:	<none>
Query params:	<none>
Form params:	<none>
Path params:	<none>
Headers:		Accept=*/*
Cookies:		<none>
Multiparts:		<none>
Body:			<none>
Request method:	DELETE
Request URI:	http://localhost:8081/orders-async21
Proxy:			<none>
Request params:	<none>
Query params:	<none>
Form params:	<none>
Path params:	<none>
Headers:		Accept=*/*
				Content-Type=application/json
Cookies:		<none>
Multiparts:		<none>
Body:
{
    "id": 4,
    "item": "myItem01",
    "price": 100.25,
    "customerId": 4
}
Request method:	GET
Request URI:	http://localhost:8081/customers-async21/email/jane.doe%2540email.com
Proxy:			<none>
Request params:	<none>
Query params:	<none>
Form params:	<none>
Path params:	email=jane.doe%40email.com
Headers:		Accept=*/*
Cookies:		<none>
Multiparts:		<none>
Body:			<none>
Request method:	DELETE
Request URI:	http://localhost:8081/customers-async21
Proxy:			<none>
Request params:	<none>
Query params:	<none>
Form params:	<none>
Path params:	<none>
Headers:		Accept=*/*
				Content-Type=application/json
Cookies:		<none>
Multiparts:		<none>
Body:
{
    "id": 4,
    "firstName": "Jane",
    "lastName": "Doe",
    "email": "jane.doe@email.com",
    "phone": "0987654321"
}
[INFO] Tests run: 9, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.194 s -- in fr.simplex_software.fifty_shades_of_rest.orders.async.tests.OrdersAsyncJaxRs21RestAssuredClientIT
2025-02-05 19:20:30,308 INFO  [io.quarkus] (main) orders-async stopped in 0.020s
[INFO] 
[INFO] Results:
[INFO] 
[INFO] Tests run: 36, Failures: 0, Errors: 0, Skipped: 0
[INFO] 
[INFO] 
[INFO] ------< fr.simplex-software.workshop:orders-reactive-repository >-------
[INFO] Building 50 Shades of REST :: the reactive repository module 1.0-SNAPSHOT [10/12]
[INFO]   from orders-reactive-repository/pom.xml
[INFO] --------------------------------[ jar ]---------------------------------
[INFO] 
[INFO] --- failsafe:3.3.1:integration-test (default-cli) @ orders-reactive-repository ---
[INFO] 
[INFO] --------< fr.simplex-software.workshop:orders-reactive-service >--------
[INFO] Building 50 Shades of REST :: the reactive service module 1.0-SNAPSHOT [11/12]
[INFO]   from orders-reactive-service/pom.xml
[INFO] --------------------------------[ jar ]---------------------------------
[INFO] 
[INFO] --- failsafe:3.3.1:integration-test (default-cli) @ orders-reactive-service ---
[INFO] 
[INFO] ------------< fr.simplex-software.workshop:orders-reactive >------------
[INFO] Building 50 Shades of REST :: the reactive module 1.0-SNAPSHOT   [12/12]
[INFO]   from orders-reactive/pom.xml
[INFO] --------------------------------[ jar ]---------------------------------
[INFO] 
[INFO] --- failsafe:3.3.1:integration-test (default-cli) @ orders-reactive ---
[INFO] Using auto detected provider org.apache.maven.surefire.junitplatform.JUnitPlatformProvider
[INFO] 
[INFO] -------------------------------------------------------
[INFO]  T E S T S
[INFO] -------------------------------------------------------
[INFO] Running fr.simplex_software.fifty_shades_of_rest.orders.react.tests.OrdersReactMpClientIT
2025-02-05 19:20:35,002 INFO  [org.tes.DockerClientFactory] (build-29) Testcontainers version: 1.20.4
2025-02-05 19:20:35,143 INFO  [org.tes.doc.DockerClientProviderStrategy] (build-29) Loaded org.testcontainers.dockerclient.UnixSocketClientProviderStrategy from ~/.testcontainers.properties, will try it first
2025-02-05 19:20:35,381 INFO  [org.tes.doc.DockerClientProviderStrategy] (build-29) Found Docker environment with local Unix socket (unix:///var/run/docker.sock)
2025-02-05 19:20:35,383 INFO  [org.tes.DockerClientFactory] (build-29) Docker host IP address is localhost
2025-02-05 19:20:35,398 INFO  [org.tes.DockerClientFactory] (build-29) Connected to docker: 
  Server Version: 27.2.0
  API Version: 1.47
  Operating System: Ubuntu 24.04.1 LTS
  Total Memory: 31733 MB
2025-02-05 19:20:35,409 INFO  [org.tes.ima.PullPolicy] (build-29) Image pull policy will be performed by: DefaultPullPolicy()
2025-02-05 19:20:35,411 INFO  [org.tes.uti.ImageNameSubstitutor] (build-29) Image name substitution will be performed by: DefaultImageNameSubstitutor (composite of 'ConfigurationFileImageNameSubstitutor' and 'PrefixingImageNameSubstitutor')
2025-02-05 19:20:35,415 INFO  [org.tes.DockerClientFactory] (build-29) Checking the system...
2025-02-05 19:20:35,415 INFO  [org.tes.DockerClientFactory] (build-29) ✔︎ Docker server version should be at least 1.6.0
2025-02-05 19:20:35,564 INFO  [tc.doc.io/postgres:17] (build-29) Creating container for image: docker.io/postgres:17
2025-02-05 19:20:35,568 INFO  [org.tes.uti.RegistryAuthLocator] (build-29) Failure when attempting to lookup auth config. Please ignore if you don't have images in an authenticated registry. Details: (dockerImageName: docker.io/postgres:17, configFile: /home/nicolas/.docker/config.json, configEnv: DOCKER_AUTH_CONFIG). Falling back to docker-java default behaviour. Exception message: Status 404: No config supplied. Checked in order: /home/nicolas/.docker/config.json (file not found), DOCKER_AUTH_CONFIG (not set)
2025-02-05 19:20:35,654 INFO  [tc.doc.io/postgres:17] (build-29) Reusing container with ID: 86015211a0b6b095d63fe40f2f9260542a37146e4d8055692670ca5ef9c4a422 and hash: b5f315d1fe435bc41660021acba6280cb00e7e5a
2025-02-05 19:20:35,655 INFO  [tc.doc.io/postgres:17] (build-29) Reusing existing container (86015211a0b6b095d63fe40f2f9260542a37146e4d8055692670ca5ef9c4a422) and not creating a new one
2025-02-05 19:20:35,851 INFO  [tc.doc.io/postgres:17] (build-29) Container docker.io/postgres:17 started in PT0.287144235S
2025-02-05 19:20:35,852 INFO  [tc.doc.io/postgres:17] (build-29) Container is started (JDBC URL: jdbc:postgresql://localhost:9000/quarkus?loggerLevel=OFF)
2025-02-05 19:20:35,852 INFO  [io.qua.dev.pos.dep.PostgresqlDevServicesProcessor] (build-29) Dev Services for PostgreSQL started.
2025-02-05 19:20:35,854 INFO  [io.qua.dat.dep.dev.DevServicesDatasourceProcessor] (build-29) Dev Services for default datasource (postgresql) started - container ID is 86015211a0b6
2025-02-05 19:20:37,134 INFO  [org.hib.rea.pro.imp.ReactiveIntegrator] (JPA Startup Thread) HR000001: Hibernate Reactive
[Hibernate] 
    set client_min_messages = WARNING
[Hibernate] 
    alter table if exists ORDERS 
       drop constraint if exists FKflgddyesjyik2ro2p501yys8r
[Hibernate] 
    drop table if exists CUSTOMERS cascade
[Hibernate] 
    drop table if exists ORDERS cascade
[Hibernate] 
    drop sequence if exists CUSTOMERS_SEQ
[Hibernate] 
    drop sequence if exists ORDERS_SEQ
[Hibernate] 
    set client_min_messages = WARNING
[Hibernate] 
    alter table if exists ORDERS 
       drop constraint if exists FKflgddyesjyik2ro2p501yys8r
[Hibernate] 
    drop table if exists CUSTOMERS cascade
[Hibernate] 
    drop table if exists ORDERS cascade
[Hibernate] 
    drop sequence if exists CUSTOMERS_SEQ
[Hibernate] 
    drop sequence if exists ORDERS_SEQ
[Hibernate] 
    create sequence CUSTOMERS_SEQ start with 1 increment by 1
[Hibernate] 
    create sequence ORDERS_SEQ start with 1 increment by 1
[Hibernate] 
    create table CUSTOMERS (
        ID bigint not null,
        EMAIL varchar(40) not null unique,
        FIRST_NAME varchar(40) not null,
        LAST_NAME varchar(40) not null,
        PHONE varchar(40) not null unique,
        primary key (ID)
    )
[Hibernate] 
    create table ORDERS (
        PRICE numeric(38,2) not null,
        CUSTOMER_ID bigint not null,
        ID bigint not null,
        ITEM varchar(40) not null,
        primary key (ID)
    )
[Hibernate] 
    alter table if exists ORDERS 
       add constraint FKflgddyesjyik2ro2p501yys8r 
       foreign key (CUSTOMER_ID) 
       references CUSTOMERS 
       on delete cascade
2025-02-05 19:20:37,652 WARN  [io.qua.hib.orm.run.ser.QuarkusRuntimeInitDialectFactory] (JPA Startup Thread) Persistence unit default-reactive: Could not retrieve the database version to check it is at least 12.0.0
2025-02-05 19:20:37,710 INFO  [io.quarkus] (main) orders-reactive 1.0-SNAPSHOT on JVM (powered by Quarkus 3.17.2) started in 4.017s. Listening on: http://localhost:8081
2025-02-05 19:20:37,710 INFO  [io.quarkus] (main) Profile test activated. 
2025-02-05 19:20:37,710 INFO  [io.quarkus] (main) Installed features: [agroal, cdi, hibernate-orm, hibernate-orm-panache, hibernate-reactive, hibernate-reactive-panache, jdbc-postgresql, narayana-jta, reactive-pg-client, rest, rest-client, rest-client-jackson, rest-jackson, smallrye-context-propagation, vertx]
[Hibernate] 
    select
        nextval('CUSTOMERS_SEQ')
[Hibernate] 
    insert 
    into
        CUSTOMERS
        (EMAIL, FIRST_NAME, LAST_NAME, PHONE, ID) 
    values
        ($1, $2, $3, $4, $5)
[Hibernate] 
    select
        c1_0.ID,
        c1_0.EMAIL,
        c1_0.FIRST_NAME,
        c1_0.LAST_NAME,
        c1_0.PHONE 
    from
        CUSTOMERS c1_0 
    where
        c1_0.EMAIL=$1 
    offset
        $2 rows 
    fetch
        first $3 rows only
[Hibernate] 
    select
        c1_0.ID,
        c1_0.EMAIL,
        c1_0.FIRST_NAME,
        c1_0.LAST_NAME,
        c1_0.PHONE 
    from
        CUSTOMERS c1_0 
    where
        c1_0.ID=$1
[Hibernate] 
    select
        nextval('ORDERS_SEQ')
[Hibernate] 
    insert 
    into
        ORDERS
        (CUSTOMER_ID, ITEM, PRICE, ID) 
    values
        ($1, $2, $3, $4)
[Hibernate] 
    select
        o1_0.ID,
        o1_0.CUSTOMER_ID,
        o1_0.ITEM,
        o1_0.PRICE 
    from
        ORDERS o1_0
[Hibernate] 
    select
        c1_0.ID,
        c1_0.EMAIL,
        c1_0.FIRST_NAME,
        c1_0.LAST_NAME,
        c1_0.PHONE 
    from
        CUSTOMERS c1_0 
    where
        c1_0.ID=$1
[Hibernate] 
    select
        o1_0.ID,
        o1_0.CUSTOMER_ID,
        o1_0.ITEM,
        o1_0.PRICE 
    from
        ORDERS o1_0
[Hibernate] 
    select
        c1_0.ID,
        c1_0.EMAIL,
        c1_0.FIRST_NAME,
        c1_0.LAST_NAME,
        c1_0.PHONE 
    from
        CUSTOMERS c1_0 
    where
        c1_0.ID=$1
[Hibernate] 
    select
        c1_0.ID,
        c1_0.EMAIL,
        c1_0.FIRST_NAME,
        c1_0.LAST_NAME,
        c1_0.PHONE 
    from
        CUSTOMERS c1_0
[Hibernate] 
    select
        c1_0.ID,
        c1_0.EMAIL,
        c1_0.FIRST_NAME,
        c1_0.LAST_NAME,
        c1_0.PHONE 
    from
        CUSTOMERS c1_0
[Hibernate] 
    select
        c1_0.ID,
        c1_0.EMAIL,
        c1_0.FIRST_NAME,
        c1_0.LAST_NAME,
        c1_0.PHONE 
    from
        CUSTOMERS c1_0 
    where
        c1_0.EMAIL=$1 
    offset
        $2 rows 
    fetch
        first $3 rows only
[Hibernate] 
    select
        c1_0.ID,
        c1_0.EMAIL,
        c1_0.FIRST_NAME,
        c1_0.LAST_NAME,
        c1_0.PHONE 
    from
        CUSTOMERS c1_0 
    where
        c1_0.ID=$1
[Hibernate] 
    update
        CUSTOMERS 
    set
        EMAIL=$1,
        FIRST_NAME=$2,
        LAST_NAME=$3,
        PHONE=$4 
    where
        ID=$5
[Hibernate] 
    select
        c1_0.ID,
        c1_0.EMAIL,
        c1_0.FIRST_NAME,
        c1_0.LAST_NAME,
        c1_0.PHONE 
    from
        CUSTOMERS c1_0 
    where
        c1_0.EMAIL=$1 
    offset
        $2 rows 
    fetch
        first $3 rows only
[Hibernate] 
    select
        c1_0.ID,
        c1_0.EMAIL,
        c1_0.FIRST_NAME,
        c1_0.LAST_NAME,
        c1_0.PHONE 
    from
        CUSTOMERS c1_0 
    where
        c1_0.EMAIL=$1 
    offset
        $2 rows 
    fetch
        first $3 rows only
[Hibernate] 
    select
        o1_0.ID,
        o1_0.CUSTOMER_ID,
        o1_0.ITEM,
        o1_0.PRICE 
    from
        ORDERS o1_0 
    where
        o1_0.CUSTOMER_ID=$1
[Hibernate] 
    select
        c1_0.ID,
        c1_0.EMAIL,
        c1_0.FIRST_NAME,
        c1_0.LAST_NAME,
        c1_0.PHONE 
    from
        CUSTOMERS c1_0 
    where
        c1_0.ID=$1
[Hibernate] 
    select
        o1_0.ID,
        o1_0.CUSTOMER_ID,
        o1_0.ITEM,
        o1_0.PRICE 
    from
        ORDERS o1_0
[Hibernate] 
    select
        c1_0.ID,
        c1_0.EMAIL,
        c1_0.FIRST_NAME,
        c1_0.LAST_NAME,
        c1_0.PHONE 
    from
        CUSTOMERS c1_0 
    where
        c1_0.ID=$1
[Hibernate] 
    select
        o1_0.ID,
        o1_0.CUSTOMER_ID,
        c1_0.ID,
        c1_0.EMAIL,
        c1_0.FIRST_NAME,
        c1_0.LAST_NAME,
        c1_0.PHONE,
        o1_0.ITEM,
        o1_0.PRICE 
    from
        ORDERS o1_0 
    join
        CUSTOMERS c1_0 
            on c1_0.ID=o1_0.CUSTOMER_ID 
    where
        o1_0.ID=$1
[Hibernate] 
    delete 
    from
        ORDERS 
    where
        ID=$1
[Hibernate] 
    select
        c1_0.ID,
        c1_0.EMAIL,
        c1_0.FIRST_NAME,
        c1_0.LAST_NAME,
        c1_0.PHONE 
    from
        CUSTOMERS c1_0 
    where
        c1_0.EMAIL=$1 
    offset
        $2 rows 
    fetch
        first $3 rows only
[Hibernate] 
    select
        c1_0.ID,
        c1_0.EMAIL,
        c1_0.FIRST_NAME,
        c1_0.LAST_NAME,
        c1_0.PHONE 
    from
        CUSTOMERS c1_0 
    where
        c1_0.ID=$1
[Hibernate] 
    select
        o1_0.CUSTOMER_ID,
        o1_0.ID,
        o1_0.ITEM,
        o1_0.PRICE 
    from
        ORDERS o1_0 
    where
        o1_0.CUSTOMER_ID=$1
[Hibernate] 
    delete 
    from
        CUSTOMERS 
    where
        ID=$1
[INFO] Tests run: 9, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 8.081 s -- in fr.simplex_software.fifty_shades_of_rest.orders.react.tests.OrdersReactMpClientIT
[INFO] Running fr.simplex_software.fifty_shades_of_rest.orders.react.tests.OrdersReactRestAssuredClientIT
Request method:	POST
Request URI:	http://localhost:8081/customers-react
Proxy:			<none>
Request params:	<none>
Query params:	<none>
Form params:	<none>
Path params:	<none>
Headers:		Accept=*/*
				Content-Type=application/json
Cookies:		<none>
Multiparts:		<none>
Body:
{
    "id": null,
    "firstName": "John",
    "lastName": "Doe",
    "email": "john.doe@email.com",
    "phone": "1234567890"
}
[Hibernate] 
    select
        nextval('CUSTOMERS_SEQ')
[Hibernate] 
    insert 
    into
        CUSTOMERS
        (EMAIL, FIRST_NAME, LAST_NAME, PHONE, ID) 
    values
        ($1, $2, $3, $4, $5)
Request method:	GET
Request URI:	http://localhost:8081/customers-react/email/john.doe%2540email.com
Proxy:			<none>
Request params:	<none>
Query params:	<none>
Form params:	<none>
Path params:	email=john.doe%40email.com
Headers:		Accept=*/*
Cookies:		<none>
Multiparts:		<none>
Body:			<none>
[Hibernate] 
    select
        c1_0.ID,
        c1_0.EMAIL,
        c1_0.FIRST_NAME,
        c1_0.LAST_NAME,
        c1_0.PHONE 
    from
        CUSTOMERS c1_0 
    where
        c1_0.EMAIL=$1 
    offset
        $2 rows 
    fetch
        first $3 rows only
Request method:	POST
Request URI:	http://localhost:8081/orders-react
Proxy:			<none>
Request params:	<none>
Query params:	<none>
Form params:	<none>
Path params:	<none>
Headers:		Accept=*/*
				Content-Type=application/json
Cookies:		<none>
Multiparts:		<none>
Body:
{
    "id": null,
    "item": "myItem01",
    "price": 100.25,
    "customerId": 2
}
[Hibernate] 
    select
        c1_0.ID,
        c1_0.EMAIL,
        c1_0.FIRST_NAME,
        c1_0.LAST_NAME,
        c1_0.PHONE 
    from
        CUSTOMERS c1_0 
    where
        c1_0.ID=$1
[Hibernate] 
    select
        nextval('ORDERS_SEQ')
[Hibernate] 
    insert 
    into
        ORDERS
        (CUSTOMER_ID, ITEM, PRICE, ID) 
    values
        ($1, $2, $3, $4)
Request method:	GET
Request URI:	http://localhost:8081/orders-react
Proxy:			<none>
Request params:	<none>
Query params:	<none>
Form params:	<none>
Path params:	<none>
Headers:		Accept=*/*
Cookies:		<none>
Multiparts:		<none>
Body:			<none>
[Hibernate] 
    select
        o1_0.ID,
        o1_0.CUSTOMER_ID,
        o1_0.ITEM,
        o1_0.PRICE 
    from
        ORDERS o1_0
[Hibernate] 
    select
        c1_0.ID,
        c1_0.EMAIL,
        c1_0.FIRST_NAME,
        c1_0.LAST_NAME,
        c1_0.PHONE 
    from
        CUSTOMERS c1_0 
    where
        c1_0.ID=$1
Request method:	GET
Request URI:	http://localhost:8081/customers-react
Proxy:			<none>
Request params:	<none>
Query params:	<none>
Form params:	<none>
Path params:	<none>
Headers:		Accept=*/*
Cookies:		<none>
Multiparts:		<none>
Body:			<none>
[Hibernate] 
    select
        c1_0.ID,
        c1_0.EMAIL,
        c1_0.FIRST_NAME,
        c1_0.LAST_NAME,
        c1_0.PHONE 
    from
        CUSTOMERS c1_0
Request method:	GET
Request URI:	http://localhost:8081/customers-react/email/john.doe%2540email.com
Proxy:			<none>
Request params:	<none>
Query params:	<none>
Form params:	<none>
Path params:	email=john.doe%40email.com
Headers:		Accept=*/*
Cookies:		<none>
Multiparts:		<none>
Body:			<none>
[Hibernate] 
    select
        c1_0.ID,
        c1_0.EMAIL,
        c1_0.FIRST_NAME,
        c1_0.LAST_NAME,
        c1_0.PHONE 
    from
        CUSTOMERS c1_0 
    where
        c1_0.EMAIL=$1 
    offset
        $2 rows 
    fetch
        first $3 rows only
Request method:	PUT
Request URI:	http://localhost:8081/customers-react
Proxy:			<none>
Request params:	<none>
Query params:	<none>
Form params:	<none>
Path params:	<none>
Headers:		Accept=*/*
				Content-Type=application/json
Cookies:		<none>
Multiparts:		<none>
Body:
{
    "id": 2,
    "firstName": "Jane",
    "lastName": "Doe",
    "email": "jane.doe@email.com",
    "phone": "0987654321"
}
[Hibernate] 
    select
        c1_0.ID,
        c1_0.EMAIL,
        c1_0.FIRST_NAME,
        c1_0.LAST_NAME,
        c1_0.PHONE 
    from
        CUSTOMERS c1_0 
    where
        c1_0.ID=$1
[Hibernate] 
    update
        CUSTOMERS 
    set
        EMAIL=$1,
        FIRST_NAME=$2,
        LAST_NAME=$3,
        PHONE=$4 
    where
        ID=$5
Request method:	GET
Request URI:	http://localhost:8081/customers-react/email/jane.doe%2540email.com
Proxy:			<none>
Request params:	<none>
Query params:	<none>
Form params:	<none>
Path params:	email=jane.doe%40email.com
Headers:		Accept=*/*
Cookies:		<none>
Multiparts:		<none>
Body:			<none>
[Hibernate] 
    select
        c1_0.ID,
        c1_0.EMAIL,
        c1_0.FIRST_NAME,
        c1_0.LAST_NAME,
        c1_0.PHONE 
    from
        CUSTOMERS c1_0 
    where
        c1_0.EMAIL=$1 
    offset
        $2 rows 
    fetch
        first $3 rows only
Request method:	GET
Request URI:	http://localhost:8081/customers-react/email/jane.doe%2540email.com
Proxy:			<none>
Request params:	<none>
Query params:	<none>
Form params:	<none>
Path params:	email=jane.doe%40email.com
Headers:		Accept=*/*
Cookies:		<none>
Multiparts:		<none>
Body:			<none>
[Hibernate] 
    select
        c1_0.ID,
        c1_0.EMAIL,
        c1_0.FIRST_NAME,
        c1_0.LAST_NAME,
        c1_0.PHONE 
    from
        CUSTOMERS c1_0 
    where
        c1_0.EMAIL=$1 
    offset
        $2 rows 
    fetch
        first $3 rows only
Request method:	GET
Request URI:	http://localhost:8081/orders-react/customer/2
Proxy:			<none>
Request params:	<none>
Query params:	<none>
Form params:	<none>
Path params:	id=2
Headers:		Accept=*/*
Cookies:		<none>
Multiparts:		<none>
Body:			<none>
[Hibernate] 
    select
        o1_0.ID,
        o1_0.CUSTOMER_ID,
        o1_0.ITEM,
        o1_0.PRICE 
    from
        ORDERS o1_0 
    where
        o1_0.CUSTOMER_ID=$1
[Hibernate] 
    select
        c1_0.ID,
        c1_0.EMAIL,
        c1_0.FIRST_NAME,
        c1_0.LAST_NAME,
        c1_0.PHONE 
    from
        CUSTOMERS c1_0 
    where
        c1_0.ID=$1
Request method:	GET
Request URI:	http://localhost:8081/orders-react
Proxy:			<none>
Request params:	<none>
Query params:	<none>
Form params:	<none>
Path params:	<none>
Headers:		Accept=*/*
Cookies:		<none>
Multiparts:		<none>
Body:			<none>
[Hibernate] 
    select
        o1_0.ID,
        o1_0.CUSTOMER_ID,
        o1_0.ITEM,
        o1_0.PRICE 
    from
        ORDERS o1_0
[Hibernate] 
    select
        c1_0.ID,
        c1_0.EMAIL,
        c1_0.FIRST_NAME,
        c1_0.LAST_NAME,
        c1_0.PHONE 
    from
        CUSTOMERS c1_0 
    where
        c1_0.ID=$1
Request method:	DELETE
Request URI:	http://localhost:8081/orders-react
Proxy:			<none>
Request params:	<none>
Query params:	<none>
Form params:	<none>
Path params:	<none>
Headers:		Accept=*/*
				Content-Type=application/json
Cookies:		<none>
Multiparts:		<none>
Body:
{
    "id": 2,
    "item": "myItem01",
    "price": 100.25,
    "customerId": 2
}
[Hibernate] 
    select
        o1_0.ID,
        o1_0.CUSTOMER_ID,
        c1_0.ID,
        c1_0.EMAIL,
        c1_0.FIRST_NAME,
        c1_0.LAST_NAME,
        c1_0.PHONE,
        o1_0.ITEM,
        o1_0.PRICE 
    from
        ORDERS o1_0 
    join
        CUSTOMERS c1_0 
            on c1_0.ID=o1_0.CUSTOMER_ID 
    where
        o1_0.ID=$1
[Hibernate] 
    delete 
    from
        ORDERS 
    where
        ID=$1
Request method:	GET
Request URI:	http://localhost:8081/customers-react/email/jane.doe%2540email.com
Proxy:			<none>
Request params:	<none>
Query params:	<none>
Form params:	<none>
Path params:	email=jane.doe%40email.com
Headers:		Accept=*/*
Cookies:		<none>
Multiparts:		<none>
Body:			<none>
[Hibernate] 
    select
        c1_0.ID,
        c1_0.EMAIL,
        c1_0.FIRST_NAME,
        c1_0.LAST_NAME,
        c1_0.PHONE 
    from
        CUSTOMERS c1_0 
    where
        c1_0.EMAIL=$1 
    offset
        $2 rows 
    fetch
        first $3 rows only
Request method:	DELETE
Request URI:	http://localhost:8081/customers-react
Proxy:			<none>
Request params:	<none>
Query params:	<none>
Form params:	<none>
Path params:	<none>
Headers:		Accept=*/*
				Content-Type=application/json
Cookies:		<none>
Multiparts:		<none>
Body:
{
    "id": 2,
    "firstName": "Jane",
    "lastName": "Doe",
    "email": "jane.doe@email.com",
    "phone": "0987654321"
}
[Hibernate] 
    select
        c1_0.ID,
        c1_0.EMAIL,
        c1_0.FIRST_NAME,
        c1_0.LAST_NAME,
        c1_0.PHONE 
    from
        CUSTOMERS c1_0 
    where
        c1_0.ID=$1
[Hibernate] 
    select
        o1_0.CUSTOMER_ID,
        o1_0.ID,
        o1_0.ITEM,
        o1_0.PRICE 
    from
        ORDERS o1_0 
    where
        o1_0.CUSTOMER_ID=$1
[Hibernate] 
    delete 
    from
        CUSTOMERS 
    where
        ID=$1
[INFO] Tests run: 9, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.990 s -- in fr.simplex_software.fifty_shades_of_rest.orders.react.tests.OrdersReactRestAssuredClientIT
2025-02-05 19:20:40,217 INFO  [io.quarkus] (main) orders-reactive stopped in 0.026s
[INFO] 
[INFO] Results:
[INFO] 
[INFO] Tests run: 18, Failures: 0, Errors: 0, Skipped: 0
[INFO] 
[INFO] ------------------------------------------------------------------------
[INFO] Reactor Summary for 50 Shades of REST :: the orders master POM 1.0-SNAPSHOT:
[INFO] 
[INFO] 50 Shades of REST :: the orders master POM ......... SUCCESS [  0.202 s]
[INFO] 50 Shades of REST :: the domain module ............. SUCCESS [  5.144 s]
[INFO] 50 Shades of REST :: the repository module ......... SUCCESS [  6.691 s]
[INFO] 50 Shades of REST :: the API module ................ SUCCESS [  0.191 s]
[INFO] 50 Shades of REST :: the service module ............ SUCCESS [  7.848 s]
[INFO] 50 Shades of REST :: the orders management base test module SUCCESS [  0.046 s]
[INFO] 50 Shades of REST :: the classic module ............ SUCCESS [ 10.723 s]
[INFO] 50 Shades of REST :: the infrastructure module ..... SUCCESS [  0.026 s]
[INFO] 50 Shades of REST :: the async module .............. SUCCESS [  9.374 s]
[INFO] 50 Shades of REST :: the reactive repository module  SUCCESS [  0.053 s]
[INFO] 50 Shades of REST :: the reactive service module ... SUCCESS [  0.042 s]
[INFO] 50 Shades of REST :: the reactive module ........... SUCCESS [  9.818 s]
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  51.133 s
[INFO] Finished at: 2025-02-05T19:20:40+01:00
[INFO] ------------------------------------------------------------------------
